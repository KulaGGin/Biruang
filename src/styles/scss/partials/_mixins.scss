@import "variables";

@function stripUnit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  
  @return $number;
}

// Function for converting a px based size to rem.
@function cRem($size, $remFontSize:16px) {
  $remSize: $size / $remFontSize;
  //Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin calculateRemFallback($size) {
  font-size: $size;
  font-size: cRem($size); // outputs the px value as fallback for browsers that donâ€™t support rem.
}

// fluid size bound to vw
@function fluidSize-vw($size, $pg-Layout_realWidth:$pg-Layout_realWidth) {
  $percentage: stripUnit($size) / stripUnit($pg-Layout_realWidth);
  $viewWidth: $percentage * 100 * 1vw;
  
  @return #{$viewWidth};
}

@mixin fluidProperty-vw($property, $originalSize, $max-width:$pg-Layout_realWidth, $pg-Layout_realWidth:$pg-Layout_realWidth) {
  #{$property}: $originalSize;
  
  @media only screen and(max-width: $max-width) {
    #{$property}: fluidSize-vw($originalSize, $pg-Layout_realWidth); // fluid margin-bottom bound to vw
  }
}

@function trackingToEm($tracking) {
  $result: $tracking / 1000 * 1em;
  
  
  @return #{$result};
}